
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
# import matplotlib.pyplot as plt
from typing import List

MPC_SHALLOW_MIN = 1
MPC_SHALLOW_MAX = 6
MPC_DEEP_MIN = 3
MPC_DEEP_MAX = 14
MPC_NB_TRY = 2

dummy_data_str = "\t{\n" + \
    ("\t\t{{0, -1, -1, -1}, {0, -1, -1, -1}},\n"
     * (MPC_DEEP_MAX - MPC_DEEP_MIN + 1)) + \
    "\t},\n"

pair_list = [
    [(3, 1)],
    [(4, 2)],
    [(5, 1)],
    [(6, 2)],
    [(7, 3)],
    [(8, 4)],
    [(9, 3), (9, 5)],
    [(10, 4), (10, 6)],
    [(11, 3), (11, 5)],
    [(12, 4)],
    [(13, 5)],
    [(14, 6)],
]


class MPCPair:
    def __init__(self):
        self.shallow = 0
        self.slope = -1.0
        self.bias = -1.0
        self.std = -1.0


def calc_score_pair(score_df):
    score_list = [
        [[] for i in range(2)]for i in range(MPC_DEEP_MAX-MPC_DEEP_MIN+1)
    ]

    matchIdxList = score_df["matchIdx"].unique()
    for match in matchIdxList:
        match_df = score_df[score_df["matchIdx"] == match]
        for pairs in pair_list:
            # 最大２つ
            for i in range(len(pairs)):
                deep = pairs[i][0]
                shallow = pairs[i][1]

                d_score = match_df[match_df["depth"]
                                   == deep]["score"]
                s_score = match_df[match_df["depth"]
                                   == shallow]["score"]

                if len(d_score) > 0 and len(s_score) > 0:
                    score_list[deep-MPC_DEEP_MIN][i].append(
                        [s_score.values[0], d_score.values[0]]
                    )

    return score_list


def learn_model(x, y):
    model = LinearRegression()
    model.fit(x, y)
    return model


def get_stats_list(df):
    mpc_info = [
        [
            MPCPair() for i in range(2)
        ]for i in range(MPC_DEEP_MAX-MPC_DEEP_MIN+1)
    ]
    score_list = calc_score_pair(df)
    for depth in range(MPC_DEEP_MAX-MPC_DEEP_MIN):
        for tries in range(2):
            score_array = np.array(
                score_list[depth][tries])  # type: np.ndarray
            if(len(score_array) <= 0):
                break
            x = score_array[:, 0].reshape(-1, 1)
            y = score_array[:, 1].reshape(-1, 1)

            model = learn_model(x, y)
            preds = model.predict(x)

            '''
            plt.title(
                f'shallow:{pair_list[depth][tries][1]} '
                f'deep:{depth+MPC_DEEP_MIN} '
                f'a:{model.coef_[0][0]:.3f} b:{model.intercept_[0]:.3f}')
            plt.plot(x, y, 'o')
            plt.plot(x, preds)
            plt.show()
            '''

            diff = y - preds

            mpc_pair = mpc_info[depth][tries]  # type: MPCPair
            mpc_pair.shallow = pair_list[depth][tries][1]
            mpc_pair.slope = model.coef_[0][0]
            mpc_pair.bias = model.intercept_[0]
            mpc_pair.std = diff.std()
            '''
            print(mpc_pair.std)

            plt.hist(diff, bins=25)
            plt.show()
            '''
    return mpc_info


def write_mpc_stats(mpc_stats: List[List[List[MPCPair]]], outfile):
    with open(outfile, mode='w') as f:
        f.write(
            '\n/* Auto Generated by Python Script: mpc_stats.py */\n\n'
            '#include "mpc.h"\n\n'
            "static const MPCPair"
            " mpcPairs[60][MPC_DEEP_MAX - MPC_DEEP_MIN + 1][MPC_NB_TRY] = {\n")
        for nb_empty in range(60):
            if(not mpc_stats[nb_empty]):
                f.write(dummy_data_str)
                continue
            f.write(f"\t{{ /* nbEmpty:{nb_empty} */\n")
            for depth in range(MPC_DEEP_MAX-MPC_DEEP_MIN):
                f.write("\t\t{")
                for tries in range(2):
                    mpc_stat = mpc_stats[nb_empty][depth][tries]
                    f.write(
                        f"{{{mpc_stat.shallow}, {mpc_stat.slope:.6f}"
                        f", {mpc_stat.bias:.6f}, {mpc_stat.std:.6f}}},")
                f.write("},\n")
            f.write("\t},\n")
        f.write("};\n")


raw_csv_file = './resources/mpc_raw.csv'

raw_df = pd.read_csv(raw_csv_file, sep=',')
nb_empty_min = 10
nb_empty_max = raw_df['nbEmpty'].max()+1
mpc_stats = [None] * 60

for nb_empty in range(nb_empty_min, nb_empty_max):
    print("caluclating empty: "+str(nb_empty))
    scores_df = raw_df[raw_df['nbEmpty'] == nb_empty]
    mpc_stats[nb_empty] = get_stats_list(scores_df)

write_mpc_stats(mpc_stats, "./src/search/mpc_info.cpp")
